{"name":"IWriteLists","tagline":"a Valve Steam client autonomous bot framework based on node-steam","body":"Current build status: [![Build Status](https://travis-ci.org/NoMoreSugar/iwritelists.svg?branch=master)](https://travis-ci.org/NoMoreSugar/iwritelists)\r\n\r\n## Installing\r\n\r\nIt's really simple, I promise!\r\n\r\n    git clone https://github.com/NoMoreSugar/iwritelists\r\n    cd iwritelists\r\n    npm install\r\n\r\n\r\n*Note* that any special instructions involving [ursa](https://github.com/Medium/ursa) on Windows will need to be\r\nobserved.\r\n\r\nTo install a basic command implementation (with a recommended \"about\" command):\r\n\r\n    cd plugins\r\n    git clone https://github.com/NoMoreSugar/iwritelists-basicbot\r\n    cd iwritelists-basicbot\r\n\r\n### settings.json\r\n\r\nsettings.json is the configuration for IWriteLists. You can use settings.json.example to create a new settings.json.\r\nThe most important properties are the \"username\" and \"password\" fields, which are necessary to actually log on.\r\n\r\nYou can also set these fields with environment variables ``IWRITELISTS_STEAM_USER`` and ``IWRITELISTS_STEAM_PASS``\r\n(although it isn't at all recommended).\r\n\r\n### Permissions\r\n\r\nTo restrict access of (mainly) administrative commands, IWriteLists has a built-in permissions system. This data is\r\nstored in ``permissions.json``. It is recommended that you set these up once you install IWriteLists.\r\n\r\nThe default (and usually expected) ranks are:\r\n\r\n- ``superadmin``: Has access to literally everything. This should be limited to the bot owner ONLY.\r\n- ``admin``: Has access to most things, excluding certain administration functions such as modifying permissions or\r\nstarting/stopping the bot.\r\n- ``moderator``: Has access to moderation functions only (ban, etc.)\r\n- ``user``: Automatically set by IWriteLists to any user the bot is friends with. This should be limited to commands\r\nthat don't affect other user(s).\r\n\r\n*Note* that permissions aren't heritable. You will need to add users to the superadmin, admin and moderator group in\r\norder for a superadmin to have access to *all* commands.\r\n\r\nIf the permissions.json file is not set up, any non-user-level commands will be rejected.\r\n\r\n## Writing Plugins\r\n\r\nPlugins are ordinary Node modules. They have a package.json, etc., and are placed in their own directory in ./plugins/.\r\n\r\n    var init = function(twimod){\r\n\r\n       eh = twimod.eventHandler;\r\n\r\n       // register some kind of event\r\n       eh.registerEvent(\"loggedOn\", function(){\r\n            console.log(\"event fired!!\");\r\n       });\r\n\r\n       // now a command\r\n       eh.registerCommand(\"myamazingcommand\", function(msg){\r\n            msg.reply(\"2amazing4u\");\r\n       });\r\n    }\r\n\r\n    module.exports=init;\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}